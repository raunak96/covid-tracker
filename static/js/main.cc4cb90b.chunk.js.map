{"version":3,"sources":["components/card/CardComponent.jsx","components/cards/Cards.jsx","api/index.js","components/countryPicker/CountryPicker.jsx","components/chart/Chart.jsx","App.js","serviceWorker.js","index.js","components/card/CardComponent.module.css","App.module.css","components/cards/Cards.module.css","components/countryPicker/CountryPicker.module.css","components/chart/Chart.module.css","assets/covid.png","assets/loader.gif"],"names":["CardComponent","type","value","lastUpdate","Grid","item","component","Card","xs","md","className","styles","card","toLowerCase","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","Cards","data","confirmed","deaths","recovered","arr","container","spacing","justify","map","ind","key","url","fetchData","country","a","actualUrl","axios","get","console","log","response","fetchDailyData","modifiedData","dailydata","total","date","reportDate","fetchCountries","countries","name","CountryPicker","handleCountryChange","useState","setCountries","useEffect","getCountries","length","FormControl","formControl","NativeSelect","onChange","Chart","dailyData","setDailyData","getData","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","App","setData","setCountry","e","target","src","logo","alt","image","Object","keys","loader","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.cc4cb90b.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport CountUp from 'react-countup';  /* For animation of numbers from 0 to specified values */\nimport styles from \"./CardComponent.module.css\"\nconst CardComponent = ({type,value,lastUpdate}) => {\n    return (\n        <Grid item component={Card} xs={12} md={3} className={`${styles.card} ${styles[type.toLowerCase()]}`} >\n            <CardContent>\n                <Typography color=\"textSecondary\" gutterBottom>{type}</Typography>\n                <Typography variant=\"h5\">\n                    <CountUp start={0} end={value} duration={2.5} separator=\",\" />\n                </Typography>\n                <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                <Typography variant=\"body2\">Number of active cases of Covid-19</Typography>\n            </CardContent>\n        </Grid>\n    );\n};\n\nexport default CardComponent;","import React from 'react';\nimport {Grid} from '@material-ui/core';\nimport styles from \"./Cards.module.css\";\nimport CardComponent from '../card/CardComponent';\n\nconst Cards = ({data:{confirmed,deaths,recovered,lastUpdate}}) => {\n    const arr = [\n\t\t{ type: \"Infected\", value: confirmed.value },\n\t\t{ type: \"Recovered\", value: recovered.value },\n\t\t{ type: \"Deaths\", value: deaths.value },\n\t];\n    return (\n       <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n            {\n                arr.map((item,ind)=>(<CardComponent key={ind} {...item} lastUpdate={lastUpdate} />))\n            }\n            </Grid>\n       </div>\n    );\n};\n\nexport default Cards;","import axios from 'axios';\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData= async (country)=>{\n    let actualUrl= url;\n    if(country)\n        actualUrl=`${url}/countries/${country}`;\n    try {\n        const {data:{confirmed,recovered,deaths,lastUpdate}} = await axios.get(actualUrl);\n        return { confirmed, recovered, deaths, lastUpdate };\n    } catch (error) {\n        console.log(error.response.data);\n    }\n}\n\nexport const fetchDailyData = async ()=>{\n    try {\n        const {data} = await axios.get(`${url}/daily`);\n        const modifiedData = data.map(dailydata=>({\n            confirmed: dailydata.confirmed.total,\n            deaths: dailydata.deaths.total,\n            date: dailydata.reportDate\n        }))\n        return modifiedData;\n    } catch (error) {\n        console.log(error.response.data);\n    }\n}\n\nexport const fetchCountries = async () =>{\n    try {\n        const {data} = await axios.get(`${url}/countries`);\n        return data.countries.map(({name})=>name);\n    } catch (error) {\n        console.log(error.response.data);\n    }\n}","import React, { useEffect, useState } from \"react\";\nimport styles from \"./CountryPicker.module.css\";\nimport { FormControl, NativeSelect } from \"@material-ui/core\";\nimport { fetchCountries } from \"../../api\";\nconst CountryPicker = ({handleCountryChange}) => {\n    const [countries,setCountries] = useState([]);\n    useEffect(()=>{\n        const getCountries = async ()=>{\n            setCountries(await fetchCountries());\n        }\n\n        getCountries();\n    },[])\n\treturn !!countries.length ? (\n        <FormControl className={styles.formControl}>\n            <NativeSelect onChange={handleCountryChange}>\n                <option value=\"\">Global</option>\n                {\n                countries.map((country,ind)=>(\n                    <option key={ind} value={country}>{country}</option>\n                ))\n            }\n            </NativeSelect>\n            \n        </FormControl>\n    ):null;\n};\n\nexport default CountryPicker;\n","import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\nimport styles from \"./Chart.module.css\";\n\nconst Chart = ({data:{confirmed,deaths,recovered,lastUpdate},country}) => {\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(()=>{\n        const getData = async ()=>{\n            setDailyData(await fetchDailyData());\n        }\n        getData();\n    },[]);\n\n    const lineChart= !!dailyData.length ? (\n    <Line\n        data={{\n            labels: dailyData.map(({date})=>date),\n            datasets: [{\n                data: dailyData.map(({confirmed})=>confirmed),\n                label: 'Infected',\n                borderColor: '#3333ff',\n                fill:true\n            },{\n                data: dailyData.map(({deaths})=>deaths),\n                label: 'Deaths',\n                borderColor: 'red',\n                backgroundColor: 'rgba(255,0,0,0.5)',\n                fill:true\n            }]\n        }}\n    />\n    ):null;\n    const barChart = (!confirmed || !deaths || !recovered || !lastUpdate)? null: (\n        <Bar \n            data={{\n                labels: ['Infected','Recovered','Deaths'],\n                datasets:[{\n                    label: 'People',\n                    backgroundColor:['rgba(0,0,255,0.5)','rgba(0,255,0,0.5)','rgba(255,0,0,0.5)'],\n                    data: [confirmed.value,recovered.value,deaths.value]\n                }]\n            }}\n            options={{\n                legend: {display:false},\n                title: {display:true, text:`Current state in ${country}`}\n            }}\n        />\n    );\n    return (\n        <div className={styles.container}>\n           {country ? barChart : lineChart} \n        </div>\n    );\n};\n\nexport default Chart;","import React, { useEffect, useState } from \"react\";\nimport { Cards, Chart, CountryPicker } from \"./components\";\nimport styles from \"./App.module.css\";\nimport { fetchData } from \"./api\";\nimport logo from \"./assets/covid.png\";\nimport loader from \"./assets/loader.gif\";\n\nconst App = () => {\n\tconst [data,setData] = useState({});\n\tconst [country, setCountry] = useState('');\n\tuseEffect(()=>{\n\t\tconst getData = async ()=>{\n\t\t\tsetData(await fetchData(country));\n\t\t}\n\t\tgetData();\n\t},[country]);\n\n\tconst handleCountryChange = async (e)=>{\n\t\tsetCountry(e.target.value);\n\t}\n\treturn (\n\t\t<div className={styles.container}>\n\t\t\t<img src={logo} alt=\"covid-19\" className={styles.image} />\n\t\t\t{!!Object.keys(data).length ? (<Cards data={data} />):(<img src={loader} alt=\"loading\"/>)}\n\t\t\t<CountryPicker handleCountryChange={handleCountryChange} />\n\t\t\t<Chart data={data} country={country} />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"CardComponent_card__SCN4G\",\"infected\":\"CardComponent_infected__3kTbB\",\"recovered\":\"CardComponent_recovered__12Q3u\",\"deaths\":\"CardComponent_deaths__2Klxp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2rcre\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__l7FIF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2Qe1l\"};","module.exports = __webpack_public_path__ + \"static/media/covid.d7265326.png\";","module.exports = __webpack_public_path__ + \"static/media/loader.c38d59b0.gif\";"],"sourceRoot":""}